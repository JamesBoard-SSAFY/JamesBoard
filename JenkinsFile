pipeline {
    agent any

    environment {
        EC2_USER = credentials('EC2_USER')
        EC2_IP = credentials('EC2_IP')
        SSH_KEY = credentials('SSH_KEY')
        DOCKER_COMPOSE_PATH = credentials('DOCKER_PATH') // EC2 내 docker-compose.yml 위치

        JAVA_HOME = '/opt/java/openjdk'
        GRADLE_HOME = '/opt/gradle/gradle-8.5'
        PATH = "${JAVA_HOME}/bin:${GRADLE_HOME}/bin:${env.PATH}"
    }

    tools {
        jdk 'JDK 17'
        gradle 'Gradle 8.5'
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo 'Cloning the repository...'
                git branch: 'feat/infra',
                    url: 'https://lab.ssafy.com/s12-bigdata-recom-sub1/S12P21D205.git',
                    credentialsId: 'GitLab-PAT'
            }
        }

        stage('Build Application') {
            steps {
                echo 'Building the application with Gradle Wrapper...'
                dir('back/JamesBoard') {  // 폴더 구조 반영
                    sh './gradlew clean build'
                    sh 'ls -al $(pwd)/build/libs'
                }
            }
        }

        stage('Transfer Files to EC2') {
            steps {
                echo 'Transferring application files and Docker Compose configuration to EC2...'
                sh """
                scp -i ${SSH_KEY} -r ${WORKSPACE}/back/JamesBoard/build/libs/*.jar ${EC2_USER}@${EC2_IP}:${DOCKER_PATH}/back/JamesBoard/
                scp -i ${SSH_KEY} -r ${WORKSPACE}/docker-compose.yml ${EC2_USER}@${EC2_IP}:${DOCKER_PATH}/
                """
            }
        }

        stage('Deploy using Docker Compose on EC2') {
            steps {
                echo 'Deploying the application using Docker Compose...'
                sh """
                ssh -i ${SSH_KEY} ${EC2_USER}@${EC2_IP} << 'EOF'
                cd ${DOCKER_PATH}
                docker-compose down
                docker-compose up -d --build
                EOF
                """
            }
        }
    }

    post {
        always {
            echo 'Cleaning workspace...'
            cleanWs()
        }
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed.'
        }
    }
}
